generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  password      String
  accounts      Account[]
  favorites     Favorite[]
  orders        Order[]
  sessions      Session[]
}

model Product {
  id              String     @id @default(cuid())
  name            String
  price           Int
  imageUrl        String?
  bigCategoryId   String?
  imageHeight     Int?
  imageWidth      Int?
  color           String?
  smallCategoryId String?
  favorites       Favorite[]
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  totalCount  Int     @default(0)
  totalPrice  Int     @default(0)
  stripeId   String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
